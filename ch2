A graph is an abstract data type typically used to model data that contains objects (referred to as nodes or vertices), and some sort of relationship between those objects (lines or edges).

A graph database is essentially a collection of nodes and edges. 
Each node represents an entity (such as a person or business) and each edge represents a connection or relationship between two nodes. 
Every node in a graph database is defined by a unique identifier, a set of outgoing edges and/or incoming edges and a set of properties expressed as key/value pairs.
Each edge is defined by a unique identifier, a starting-place and/or ending-place node and a set of properties.
Graph database is a nosql database structure.
//graph database phtoto.


Why Graph Databases?

We live in a connected world! There are no isolated pieces of information, but rich, connected domains all around us. 
Only a database that natively embraces relationships is able to store, process, and query connections efficiently.
While other databases compute relationships at query time through expensive JOIN operations, 
a graph database stores connections alongside the data in the model.

Accessing nodes and relationships in a native graph database is an efficient, constant-time operation and allows 
you to quickly traverse millions of connections per second per core.

Independent of the total size of your dataset, graph databases excel at managing highly-connected data and complex queries
. With only a pattern and a set of starting points, graph databases explore the neighboring data around those initial starting points — collecting and aggregating information from millions of nodes and relationships — and leaving any data outside the search perimeter untouched.
Graph databases, by design, allow simple and fast retrieval of complex hierarchical structures that are difficult to 
model in relational systems. 

















Graph NOQL vs RElational 

//comparision noql types photo


These properties correspond to the columns in a relational database.
Edges are use to describe the relationships between the objects contained in the database, 
and in most they can be compared to the foreign key column of a row in a RDBMS.



SQL VS NOSQL  
SQL databases use structured query language (SQL) for defining and manipulating data.
On one hand, this is extremely powerful: SQL is one of the most versatile and widely-used options available, making it a safe choice and especially great for complex queries. On the other hand, it can be restrictive. SQL requires that you use predefined schemas to determine the structure of your data before you work with it. 
In addition, all of your data must follow the same structure. 

A NoSQL database, on the other hand, has dynamic schema for unstructured data, and data is stored in many ways: it can be column-oriented, document-oriented, graph-based or organized as a KeyValue store. This flexibility means that:

    You can create documents without having to first define their structure
    Each document can have its own unique structure
    The syntax can vary from database to database, and
    You can add fields as you go.

