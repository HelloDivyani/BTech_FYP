//Chapter 3
Proposed Work 

3.1 Flow of Goals

Flowchart explains the sequences of goals to be achieved to fulfil the objective of finding influential nodes from twitter data 
based on particular domain.


// Flowchart of events

3.1 Fetching Twitter Data and Integrating Neo4j with Frontend Technology

Speciality of twitter data are-
• A Twitter user’s activity data (tweets, followers, etc) is all public by
default.
• Twitter’s API allowed us to automatically download up to 20,000 data
points per hour.
• Twitter uses auto-incrementing ID numbers (1,2,3,4. . . ) for both users
and tweets.

Twitter’s Streaming API  - allows you to do complex queries like pulling every tweet
about a certain topic within the last twenty minutes, or pull a certain user’s
non-retweeted tweets.

Technology Used : 
Python 2.7, Neo4j community 3.2.9.
python library-
• py2neo (toolkit for working with neo4j and python)
• tweepy ( to connect to Twitter’s API)
Python Framework - flask(to create web application)

Twitter provides two types of API to access their data:
  1.RESTful API : Used to get data about existing data objects like statuss "tweets", user, etc.
  2.Streaming API : Used to get live statuses "tweets" as they are sent.
  
 Reason to use streaming API:
  1. Capture large amount of data because RESTful API has limited access to older data.
  2. Real-time analysis like monitoring social discussion about a live event


Twitter Timeline Data Fetch
Using Twitter Streaming AP we extracted ten days recent tweets from your Twitter feed containing hash-
tag of demonitization and Indian politics. The python script uses py2neo
library, fetch the twitter data through tweepy and dump data in graph.db
of neo4j.

//image of twitter data on neo4j


3.2 Future Work

Our plan is to analyse features of twitter graph data (followers, mentions, hastags, likes, following, tweets, retweets) in
terms of influential nodes using existing techniques such as centrality measures, page rank(Iterative Approach) and other 
efficient algorithms.Also,compare the results obtained and provide 
user-friendly visualization using Neo4j.


